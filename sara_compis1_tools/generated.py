from sara_compis1_tools.StateAFD import StateAFD
from lexEval import LexEval
from Error import Error

import sys

mega = [StateAFD(name='init',transitions={'ε': 'A'},accepting=False,start=True, value=None),StateAFD(name='A',transitions={'a': 'B', 'b': 'B', 'c': 'B', 'd': 'B', 'e': 'B', 'f': 'B', 'g': 'B', 'h': 'B', 'i': 'B', 'j': 'B', 'k': 'B', 'l': 'B', 'm': 'B', 'n': 'B', 'o': 'B', 'p': 'B', 'q': 'B', 'r': 'B', 's': 'B', 't': 'B', 'u': 'B', 'v': 'B', 'w': 'B', 'x': 'B', 'y': 'B', 'z': 'B', 'A': 'B', 'B': 'B', 'C': 'B', 'D': 'B', 'E': 'B', 'F': 'B', 'G': 'B', 'H': 'B', 'I': 'B', 'J': 'B', 'K': 'B', 'L': 'B', 'M': 'B', 'N': 'B', 'O': 'B', 'P': 'B', 'Q': 'B', 'R': 'B', 'S': 'B', 'T': 'B', 'U': 'B', 'V': 'B', 'W': 'B', 'X': 'B', 'Y': 'B', 'Z': 'B'},accepting=False,start=False, value=None),StateAFD(name='B',transitions={'a': 'B', 'b': 'B', 'c': 'B', 'd': 'B', 'e': 'B', 'f': 'B', 'g': 'B', 'h': 'B', 'i': 'B', 'j': 'B', 'k': 'B', 'l': 'B', 'm': 'B', 'n': 'B', 'o': 'B', 'p': 'B', 'q': 'B', 'r': 'B', 's': 'B', 't': 'B', 'u': 'B', 'v': 'B', 'w': 'B', 'x': 'C', 'y': 'B', 'z': 'B', 'A': 'B', 'B': 'B', 'C': 'B', 'D': 'B', 'E': 'B', 'F': 'B', 'G': 'B', 'H': 'B', 'I': 'B', 'J': 'B', 'K': 'B', 'L': 'B', 'M': 'B', 'N': 'B', 'O': 'B', 'P': 'B', 'Q': 'B', 'R': 'B', 'S': 'B', 'T': 'B', 'U': 'B', 'V': 'B', 'W': 'B', 'X': 'B', 'Y': 'B', 'Z': 'B', '0': 'B', '1': 'B', '2': 'B', '3': 'B', '4': 'B', '5': 'B', '6': 'B', '7': 'B', '8': 'B', '9': 'B'},accepting=False,start=False, value=None),StateAFD(name='C',transitions={'a': 'B', 'b': 'B', 'c': 'B', 'd': 'B', 'e': 'B', 'f': 'B', 'g': 'B', 'h': 'B', 'i': 'B', 'j': 'B', 'k': 'B', 'l': 'B', 'm': 'B', 'n': 'B', 'o': 'B', 'p': 'B', 'q': 'B', 'r': 'B', 's': 'B', 't': 'B', 'u': 'B', 'v': 'B', 'w': 'B', 'x': 'C', 'y': 'D', 'z': 'B', 'A': 'B', 'B': 'B', 'C': 'B', 'D': 'B', 'E': 'B', 'F': 'B', 'G': 'B', 'H': 'B', 'I': 'B', 'J': 'B', 'K': 'B', 'L': 'B', 'M': 'B', 'N': 'B', 'O': 'B', 'P': 'B', 'Q': 'B', 'R': 'B', 'S': 'B', 'T': 'B', 'U': 'B', 'V': 'B', 'W': 'B', 'X': 'B', 'Y': 'B', 'Z': 'B', '0': 'B', '1': 'B', '2': 'B', '3': 'B', '4': 'B', '5': 'B', '6': 'B', '7': 'B', '8': 'B', '9': 'B'},accepting=False,start=False, value=None),StateAFD(name='D',transitions={'a': 'B', 'b': 'B', 'c': 'B', 'd': 'B', 'e': 'B', 'f': 'B', 'g': 'B', 'h': 'B', 'i': 'B', 'j': 'B', 'k': 'B', 'l': 'B', 'm': 'B', 'n': 'B', 'o': 'B', 'p': 'B', 'q': 'B', 'r': 'B', 's': 'B', 't': 'B', 'u': 'B', 'v': 'B', 'w': 'B', 'x': 'C', 'y': 'B', 'z': 'E', 'A': 'B', 'B': 'B', 'C': 'B', 'D': 'B', 'E': 'B', 'F': 'B', 'G': 'B', 'H': 'B', 'I': 'B', 'J': 'B', 'K': 'B', 'L': 'B', 'M': 'B', 'N': 'B', 'O': 'B', 'P': 'B', 'Q': 'B', 'R': 'B', 'S': 'B', 'T': 'B', 'U': 'B', 'V': 'B', 'W': 'B', 'X': 'B', 'Y': 'B', 'Z': 'B', '0': 'B', '1': 'B', '2': 'B', '3': 'B', '4': 'B', '5': 'B', '6': 'B', '7': 'B', '8': 'B', '9': 'B'},accepting=False,start=False, value=None),StateAFD(name='E',transitions={'a': 'B', 'b': 'B', 'c': 'B', 'd': 'B', 'e': 'B', 'f': 'B', 'g': 'B', 'h': 'B', 'i': 'B', 'j': 'B', 'k': 'B', 'l': 'B', 'm': 'B', 'n': 'B', 'o': 'B', 'p': 'B', 'q': 'B', 'r': 'B', 's': 'B', 't': 'B', 'u': 'B', 'v': 'B', 'w': 'B', 'x': 'C', 'y': 'B', 'z': 'B', 'A': 'B', 'B': 'B', 'C': 'B', 'D': 'B', 'E': 'B', 'F': 'B', 'G': 'B', 'H': 'B', 'I': 'B', 'J': 'B', 'K': 'B', 'L': 'B', 'M': 'B', 'N': 'B', 'O': 'B', 'P': 'B', 'Q': 'B', 'R': 'B', 'S': 'B', 'T': 'B', 'U': 'B', 'V': 'B', 'W': 'B', 'X': 'B', 'Y': 'B', 'Z': 'B', '0': 'B', '1': 'B', '2': 'B', '3': 'B', '4': 'B', '5': 'B', '6': 'B', '7': 'B', '8': 'B', '9': 'B'},accepting=True,start=False, value='print("Identificador\\n")'),StateAFD(name='init',transitions={'ε': 'F'},accepting=False,start=True, value=None),StateAFD(name='F',transitions={'0': 'G', '1': 'G', '2': 'G', '3': 'G', '4': 'G', '5': 'G', '6': 'G', '7': 'G', '8': 'G', '9': 'G'},accepting=False,start=False, value=None),StateAFD(name='G',transitions={'0': 'G', '1': 'G', '2': 'G', '3': 'G', '4': 'G', '5': 'G', '6': 'G', '7': 'G', '8': 'G', '9': 'G'},accepting=True,start=False, value='print("Número entero\\n")'),StateAFD(name='init',transitions={'ε': 'H'},accepting=False,start=True, value=None),StateAFD(name='H',transitions={'0': 'I', '1': 'I', '2': 'I', '3': 'I', '4': 'I', '5': 'I', '6': 'I', '7': 'I', '8': 'I', '9': 'I'},accepting=False,start=False, value=None),StateAFD(name='I',transitions={'0': 'J', '1': 'J', '2': 'J', '3': 'J', '4': 'J', '5': 'J', '6': 'J', '7': 'J', '8': 'J', '9': 'J', '.': 'K'},accepting=False,start=False, value=None),StateAFD(name='J',transitions={'0': 'J', '1': 'J', '2': 'J', '3': 'J', '4': 'J', '5': 'J', '6': 'J', '7': 'J', '8': 'J', '9': 'J', '.': 'K'},accepting=False,start=False, value=None),StateAFD(name='K',transitions={'0': 'L', '1': 'L', '2': 'L', '3': 'L', '4': 'L', '5': 'L', '6': 'L', '7': 'L', '8': 'L', '9': 'L'},accepting=False,start=False, value=None),StateAFD(name='L',transitions={'0': 'M', '1': 'M', '2': 'M', '3': 'M', '4': 'M', '5': 'M', '6': 'M', '7': 'M', '8': 'M', '9': 'M'},accepting=True,start=False, value='print("Número decimal\\n")'),StateAFD(name='M',transitions={'0': 'M', '1': 'M', '2': 'M', '3': 'M', '4': 'M', '5': 'M', '6': 'M', '7': 'M', '8': 'M', '9': 'M'},accepting=True,start=False, value='print("Número decimal\\n")'),StateAFD(name='init',transitions={'ε': 'N'},accepting=False,start=True, value=None),StateAFD(name='N',transitions={'i': 'O'},accepting=False,start=False, value=None),StateAFD(name='O',transitions={'f': 'P'},accepting=False,start=False, value=None),StateAFD(name='P',transitions={},accepting=True,start=False, value='print("Palabra reservada: If\\n")'),StateAFD(name='init',transitions={'ε': 'Q'},accepting=False,start=True, value=None),StateAFD(name='Q',transitions={'f': 'R'},accepting=False,start=False, value=None),StateAFD(name='R',transitions={'o': 'S'},accepting=False,start=False, value=None),StateAFD(name='S',transitions={'r': 'T'},accepting=False,start=False, value=None),StateAFD(name='T',transitions={},accepting=True,start=False, value='print("Palabra reservada: For\\n")')]
errors = set()

if len(sys.argv) < 2:
	print('Por favor ingrese el archivo plano')
	sys.exit(1)
txt_file = sys.argv[1]

lex = LexEval(txt_file)
results = lex.evaluate(mega, errors)
lex.print_tokens(results)

from Visualizer import Visualizer
v = Visualizer()
v.draw_mega_afd(mega)
